# This file is designed for production server deployment, not local development work
# For a containerized local dev environment, see: https://github.com/truecolors/truecolors/blob/main/docs/DEVELOPMENT.md#docker

version: '3'
services:
  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis:/data

  # es:
  #   restart: always
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
  #     - "xpack.license.self_generated.type=basic"
  #     - "xpack.security.enabled=false"
  #     - "xpack.watcher.enabled=false"
  #     - "xpack.graph.enabled=false"
  #     - "xpack.ml.enabled=false"
  #     - "bootstrap.memory_lock=true"
  #     - "cluster.name=es-truecolors"
  #     - "discovery.type=single-node"
  #     - "thread_pool.write.queue_size=1000"
  #   networks:
  #      - external_network
  #      - internal_network
  #   healthcheck:
  #      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
  #   volumes:
  #      - ./elasticsearch:/usr/share/elasticsearch/data
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   ports:
  #     - '127.0.0.1:9200:9200'

  web:
    image: tootsuite/truecolors:latest
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /truecolors/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"]
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
      # - es
    volumes:
      - /opt/truecolors/public/system:/truecolors/public/system
      - /opt/truecolors/public/assets:/truecolors/public/assets
      - /opt/truecolors/public/packs:/truecolors/public/packs
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  streaming:
    image: tootsuite/truecolors:latest
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  sidekiq:
    image: tootsuite/truecolors:latest
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - /opt/truecolors/public/system:/truecolors/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_hidden_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network
  #
  # privoxy:
  #   image: sirboops/privoxy
  #   volumes:
  #     - ./priv-config:/opt/config
  #   networks:
  #     - external_network
  #     - internal_network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ./ollama:/root/.ollama
    ports:
      - "127.0.0.1:11434:11434"  # Only expose locally
    deploy:
      resources:
        limits:
          memory: 35G  # Increased from 8G to 35G
          cpus: '4'   # Adjust based on your server capacity
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - internal_network  # Use your existing network
      
  crewai-bot:
    image: tootsuite/truecolors:latest
    restart: always
    env_file: .env.production
    environment:
      - OLLAMA_HOST=http://ollama:11434
    command: bash -c "bundle exec rails crew_bot:start"
    depends_on:
      - db
      - redis
      - ollama
    networks:
      - external_network
      - internal_network
    volumes:
      - /opt/truecolors/public/system:/truecolors/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[p]ython.*xmpp_bot.py' || exit 1"]
    extra_hosts:
      - 'host.docker.internal:host-gateway'

networks:
  external_network:
  internal_network:
    internal: true
