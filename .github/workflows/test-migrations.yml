name: Historical data migration test

on:
  merge_group:
  push:
    branches:
      - 'main'
      - 'stable-*'
    paths:
      - 'Gemfile*'
      - '.ruby-version'
      - '**/*.rb'
      - '.github/workflows/test-migrations.yml'
      - 'lib/tasks/tests.rake'
      - 'lib/tasks/db.rake'

  pull_request:
    paths:
      - 'Gemfile*'
      - '.ruby-version'
      - '**/*.rb'
      - '.github/workflows/test-migrations.yml'
      - 'lib/tasks/tests.rake'

env:
  BUNDLE_FROZEN: false

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 3s
          --health-retries 50
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 50
        ports:
          - 6379:6379

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASS: postgres
      RAILS_ENV: test
      BUNDLE_CLEAN: true
      BUNDLE_FROZEN: false
      BUNDLE_WITHOUT: 'development:production'
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      # Add encryption keys
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}
      # Add other essential secrets
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      OTP_SECRET: ${{ secrets.OTP_SECRET }}

    steps:
      - uses: actions/checkout@v4

      # Add our fix for duplicate migrations as early as possible
      - name: Prevent duplicate migrations
        run: |
          echo "Scanning for and fixing duplicate migrations immediately after checkout..."
          # Simple version that doesn't require Rails - run this BEFORE any Rails code is loaded
          cat > fix_migrations.rb << 'EOL'
          #!/usr/bin/env ruby
          # Stand-alone script that doesn't require Rails to be loaded
          require 'fileutils'
          
          puts "Starting migration check..."
          
          # Get all migration files
          migration_files = Dir.glob(File.join('db', '**', '[0-9]*_*.rb'))
          puts "Found #{migration_files.size} migration files"
          
          # Group by timestamp
          migrations_by_timestamp = {}
          migration_files.each do |file_path|
            timestamp = File.basename(file_path).split('_').first
            migrations_by_timestamp[timestamp] ||= []
            migrations_by_timestamp[timestamp] << file_path
          end
          
          # Find duplicates
          duplicates = migrations_by_timestamp.select { |_ts, files| files.size > 1 }
          
          if duplicates.empty?
            puts "No duplicate migrations found!"
            exit 0
          end
          
          puts "Found #{duplicates.size} duplicate migrations to fix:"
          
          # Process duplicates
          duplicates.each do |timestamp, files|
            puts "- Timestamp #{timestamp} has #{files.size} files:"
            files.each { |f| puts "  * #{f}" }
            
            # Keep one file (preferring db/migrate/ over post_migrate)
            files_to_keep = files.select { |f| f.include?('/migrate/') && !f.include?('/post_migrate/') }
            file_to_keep = files_to_keep.first || files.first
            
            puts "  Keeping: #{file_to_keep}"
            
            # Remove other duplicates
            files_to_remove = files - [file_to_keep]
            files_to_remove.each do |file|
              puts "  Removing: #{file}"
              File.delete(file) if File.exist?(file)
            end
            
            puts "  Fixed duplicate: #{timestamp}"
          end
          
          puts "All duplicate migrations have been fixed!"
          EOL
          
          # Run the script immediately
          ruby fix_migrations.rb

      - name: Set up Ruby environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: '3.2.2'

      - name: Allow bundle modifications
        run: |
          bundle config set --local frozen false
          bundle install --jobs 4

      - name: Ensure no errors with `db:prepare`
        run: |
          bin/rails db:drop
          bin/rails db:prepare
          bin/rails db:migrate

      - name: Ensure no errors with `db:prepare` and SKIP_POST_DEPLOYMENT_MIGRATIONS
        run: |
          bin/rails db:drop
          SKIP_POST_DEPLOYMENT_MIGRATIONS=true bin/rails db:prepare
          bin/rails db:migrate

      - name: Test "one step migration" flow
        run: |
          bin/rails db:drop
          bin/rails db:create
          bin/rails tests:migrations:prepare_database
          bin/rails db:migrate
          bin/rails tests:migrations:check_database

      - name: Test "two step migration" flow
        run: |
          bin/rails db:drop
          bin/rails db:create
          SKIP_POST_DEPLOYMENT_MIGRATIONS=true bin/rails tests:migrations:prepare_database

          # Migrate up to v4.2.0 breakpoint
          bin/rails db:migrate VERSION=20230907150100

          # Migrate the rest
          SKIP_POST_DEPLOYMENT_MIGRATIONS=true bin/rails db:migrate
          bin/rails db:migrate
          bin/rails tests:migrations:check_database