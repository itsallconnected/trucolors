name: Historical data migration test

on:
  merge_group:
  push:
    branches:
      - 'main'
      - 'stable-*'
    paths:
      - 'Gemfile*'
      - '.ruby-version'
      - '**/*.rb'
      - '.github/workflows/test-migrations.yml'
      - 'lib/tasks/tests.rake'
      - 'lib/tasks/db.rake'

  pull_request:
    paths:
      - 'Gemfile*'
      - '.ruby-version'
      - '**/*.rb'
      - '.github/workflows/test-migrations.yml'
      - 'lib/tasks/tests.rake'

env:
  BUNDLE_FROZEN: false

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 3s
          --health-retries 50
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 50
        ports:
          - 6379:6379

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASS: postgres
      RAILS_ENV: test
      BUNDLE_CLEAN: true
      BUNDLE_FROZEN: false
      BUNDLE_WITHOUT: 'development:production'
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: '3.2.2'

      - name: Allow bundle modifications
        run: |
          bundle config set --local frozen false
          bundle install --jobs 4

      # Add our fix for duplicate migrations - using a comprehensive solution
      - name: Prevent duplicate migrations
        run: |
          # Create a script to automatically detect and fix ALL duplicate migrations
          cat > prevent_duplicate_migrations.rb << 'EOL'
          #!/usr/bin/env ruby
          # This script automatically detects and fixes duplicate migrations
          
          require 'fileutils'
          
          # Get all migration files
          migration_files = Dir.glob(File.join('db', '**', '[0-9]*_*.rb'))
          
          # Group by timestamp
          migrations_by_timestamp = {}
          migration_files.each do |file_path|
            timestamp = File.basename(file_path).split('_').first
            migrations_by_timestamp[timestamp] ||= []
            migrations_by_timestamp[timestamp] << file_path
          end
          
          # Find duplicates
          duplicates = migrations_by_timestamp.select { |_ts, files| files.size > 1 }
          
          if duplicates.empty?
            puts "No duplicate migrations found!"
            exit 0
          end
          
          puts "Found #{duplicates.size} duplicate migrations to fix:"
          
          # Create SQL file for ensuring migrations are marked as run
          File.open('ensure_migrations.sql', 'w') do |sql|
            sql.puts "CREATE TABLE IF NOT EXISTS schema_migrations (version varchar(255) PRIMARY KEY);"
            
            duplicates.each do |timestamp, files|
              puts "  Timestamp #{timestamp} has #{files.size} files:"
              files.each { |f| puts "    - #{f}" }
              
              # Keep one file (preferring db/migrate/ over post_migrate)
              files_to_keep = files.select { |f| f.include?('/migrate/') && !f.include?('/post_migrate/') }
              file_to_keep = files_to_keep.first || files.first
              puts "  Keeping: #{file_to_keep}"
              
              # Remove other duplicates
              files_to_remove = files - [file_to_keep]
              files_to_remove.each do |file|
                puts "  Removing: #{file}"
                File.delete(file) if File.exist?(file)
              end
              
              # Add to SQL file
              sql.puts "INSERT INTO schema_migrations (version) VALUES ('#{timestamp}') ON CONFLICT DO NOTHING;"
            end
          end
          
          # Create rake task to execute the SQL after schema load
          FileUtils.mkdir_p('lib/tasks')
          File.open('lib/tasks/ensure_migrations.rake', 'w') do |f|
            f.puts <<~RAKE
              namespace :db do
                task :ensure_migrations => :environment do
                  if File.exist?('ensure_migrations.sql')
                    puts "Ensuring migrations are properly recorded..."
                    ActiveRecord::Base.connection.execute(File.read('ensure_migrations.sql'))
                  end
                end
                
                # Hook our task after schema load
                %w(db:schema:load db:structure:load).each do |task|
                  Rake::Task[task].enhance do
                    Rake::Task["db:ensure_migrations"].invoke
                  end
                end
              end
            RAKE
          end
          
          puts "Created ensure_migrations.sql and lib/tasks/ensure_migrations.rake"
          puts "Duplicate migrations have been fixed!"
          EOL
          
          # Make it executable
          chmod +x prevent_duplicate_migrations.rb
          
          # Run the script
          ruby prevent_duplicate_migrations.rb

      - name: Ensure no errors with `db:prepare`
        run: |
          bin/rails db:drop
          bin/rails db:prepare
          bin/rails db:migrate

      - name: Ensure no errors with `db:prepare` and SKIP_POST_DEPLOYMENT_MIGRATIONS
        run: |
          bin/rails db:drop
          SKIP_POST_DEPLOYMENT_MIGRATIONS=true bin/rails db:prepare
          bin/rails db:migrate

      - name: Test "one step migration" flow
        run: |
          bin/rails db:drop
          bin/rails db:create
          bin/rails tests:migrations:prepare_database
          bin/rails db:migrate
          bin/rails tests:migrations:check_database

      - name: Test "two step migration" flow
        run: |
          bin/rails db:drop
          bin/rails db:create
          SKIP_POST_DEPLOYMENT_MIGRATIONS=true bin/rails tests:migrations:prepare_database

          # Migrate up to v4.2.0 breakpoint
          bin/rails db:migrate VERSION=20230907150100

          # Migrate the rest
          SKIP_POST_DEPLOYMENT_MIGRATIONS=true bin/rails db:migrate
          bin/rails db:migrate
          bin/rails tests:migrations:check_database
